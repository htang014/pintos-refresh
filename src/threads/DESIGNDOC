			+--------------------+
			|        CS 153      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Hans Tang <htang014@ucr.edu> <861098793>
Chuanping Fan <email@domain.example> <SID>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

unsigned thread::sleep_time;
  Stores tick at which thread should wake.

static struct list sleep_list;
  List of processes currently sleeping, in order of ascending sleep_time.

void thread_sleep(void)
  Disables interrupts and then blocks the current thread.
  Adds thread to sleep_list using list_insert_ordered().

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() calculates and sets the value of sleep_time then calls
thread_sleep(), which sleeps the thread.

Once sleep_time == current_ticks, thread_tick() (called by timer_interrupt
every tick) wakes up the thread.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We used list_insert_ordered for more efficient sorting.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

timer_sleep() sorts sleeping threads into a sleep_list list structure, which
maintains the order in which threads are meant to wake up.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupt state is backed up and set to disabled before each critical
section, then restored after completion.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This is the only design we considered, however it was made with consistency
with the rest of PintOS in mind.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

int thread::priority_inherit;
  Inherited priority from a priority donation.  -1 if not in use, else
  will always override priority.

void lock_release (struct lock *lock);
  Added functionality to set priority_inherit to -1.

void lock_acquire (struct lock *lock);
  Added priority donation functionality: If list of waiting threads is 
  not empty, donate priority_inherit of highest priority waiting thread to
  thread_current()->priority, or thread_current()->priority_inherit if 
  != -1.  If priority_inherit is already larger than the passed in value, ignore it.

void thread_set_priority (int new_priority);
  Sets the value of thread::priority. Yields if thread no longer has highest
  priority.

char thread_get_priority ();
  Returns the value of thread::priority.  If priority_inherit != -1, return
  priority_inherit.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Priority donation uses a simple int, relying on the order of events for
recursion.

Given three threads, H, M, and L, with high, medium, and low priorities
respectively, and H waiting on M waiting on L:

L->priority_inherit = M->priority_inherit
  |
  M->priority_inherit = H->priority

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Priorities are donated to the locking thread, allowing it to complete first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

In a lock activation, lock_acquire() donates the highest priority thread on
the waiting list to the current thread. See B2.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release() is finally called, priority_inherit is forcibly set to -1 (disabled).
This sets the priority back to normal, allowing the higher priority thread to run. 

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

thread_set_priority() is called by lock_acquire().  Therefore, we cannot call
lock_acquire() in thread_set_priority() without causing infinite loops.  We must use
interrupt disables to prevent race conditions.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Other designs we considered involved manipulating the parameters of thread_unblock,
instead of instructions in lock_acquire. This is extremely cumbersome because 
thread_unblock is tightly integrated into PintOS and changing parameters means reimplementing
every call of the function.

			  ADVANCED SCHEDULER
			    (If Attempted)
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
